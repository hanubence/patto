#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("patto:http");
var http = require("http").Server(app);
const path = require("path");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Listen on provided port, on all network interfaces.
 */

http.listen(port);
http.on("error", onError);
http.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP http "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP http "listening" event.
 */

function onListening() {
	var addr = http.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}

/**
 * Initalize database
 */

const low = require("lowdb");
const FileSync = require("lowdb/adapters/FileSync");

const adapter = new FileSync(path.join(__dirname, "..", "db", "db.json"));
const db = low(adapter);

/**
 *  Initialize socket.io
 */

const io = require("socket.io")(http);

io.origins("*:*");

io.on("connection", (socket) => {
	socket.emit("pats", { value: db.get("pats").value() });

	socket.on("pats", (pats) => {
		db.update("pats", (n) => (n += pats.value)).write();
		socket.emit("pats", { value: db.get("pats").value() });
	});
});
